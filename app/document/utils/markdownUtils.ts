import { CaptureResponse } from "../document.types";
import { showToast } from "@/components/ui/Common/ShowToast";

export const useMarkdownExporter = () => {
  const handleMarkdownExport = (
    captures?: CaptureResponse,
    documentTitle: string = "Document"
  ) => {
    if (!captures) {
      showToast(
        "error",
        "Document data not available for export. Please try again."
      );
      return;
    }

    const title = captures.title || "Untitled Document";
    const description = captures.description || "";
    const author = captures.user?.name || "Unknown Author";
    const stepsCount = captures.steps?.length || 0;
    const date = new Date().toLocaleDateString();

    let markdown = `# ${title}\n\n`;

    if (description) {
      markdown += `> ${description}\n\n`;
    }

    markdown += `---\n\n`;
    markdown += `| Detail | Value |\n`;
    markdown += `|--------|-------|\n`;
    markdown += `| **Author** | ${author} |\n`;
    markdown += `| **Steps** | ${stepsCount} |\n`;
    markdown += `| **Generated** | ${date} |\n`;
    markdown += `| **Reading Time** | ~${Math.ceil(
      stepsCount * 0.5
    )} minutes |\n\n`;

    if (captures.steps && captures.steps.length > 0) {
      markdown += `## ðŸ“‹ Steps\n\n`;

      captures.steps.forEach((step, index) => {
        markdown += `### ${index + 1}. ${
          step.stepDescription || `Step ${index + 1}`
        }\n\n`;

        if (step.screenshot?.url) {
          const xPercent =
            step.screenshot.viewportX && step.screenshot.viewportWidth
              ? (step.screenshot.viewportX / step.screenshot.viewportWidth) *
                100
              : 0;
          const yPercent =
            step.screenshot.viewportY && step.screenshot.viewportHeight
              ? (step.screenshot.viewportY / step.screenshot.viewportHeight) *
                100
              : 0;

          if (
            step.screenshot.viewportX !== 0 &&
            step.screenshot.viewportY !== 0
          ) {
            markdown += `<div style="position: relative; display: inline-block; max-width: 100%;">\n`;
            markdown += `  <img src="${step.screenshot.url}" alt="Step ${
              index + 1
            } Screenshot" style="width: 100%; height: auto; border: 1px solid #e5e7eb; border-radius: 6px;" />\n`;
            markdown += `  <div style="position: absolute; left: ${xPercent}%; top: ${yPercent}%; width: 32px; height: 32px; border: 4px solid #3b82f6; background-color: rgba(59, 130, 246, 0.3); border-radius: 50%; transform: translate(-50%, -50%); pointer-events: none;"></div>\n`;
            markdown += `</div>\n\n`;
          } else {
            markdown += `![Step ${index + 1} Screenshot](${
              step.screenshot.url
            } "Step ${index + 1}: ${
              step.stepDescription || "Screenshot"
            }")\n\n`;
          }
        }

        if (index < captures.steps.length - 1) {
          markdown += `---\n\n`;
        }
      });
    }

    markdown += `\n---\n\n`;
    markdown += `<div align="center">\n\n`;
    markdown += `*Generated by **Stepture** on ${date}*\n\n`;
    markdown += `</div>\n`;

    try {
      const blob = new Blob([markdown], { type: "text/markdown" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;

      const filename = `${documentTitle
        .replace(/[^a-z0-9]/gi, "_")
        .toLowerCase()}_${new Date().toISOString().split("T")[0]}.md`;

      link.download = filename;
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);

      showToast("success", "Markdown file downloaded successfully!");
    } catch (error) {
      console.error("Error generating markdown:", error);
      showToast("error", "Failed to export markdown. Please try again.");
    }
  };

  return { handleMarkdownExport };
};
